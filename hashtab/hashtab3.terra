stdio  = terralib.includec("stdio.h")
stdlib = terralib.includec("stdlib.h")
myhash = terralib.includec("myhash.h")
ffi    = require("ffi")

local function ptable(w)   for key,value in pairs(w) do print(key,value) end end
local hash = {}
terralib.linklibrary("myhash.so")

terra hash.cstring2hash(a : &int8) : uint64
   var hash =  5381ULL
   var c = @a
   var i :int8 = 0 -- typing makes a difference
   while c~=0 do
      hash = (( hash << 5)+hash) + c
      i = i+1
      c = @(a + i)
   end
   return hash
end

function makePrimitiveTypedHashTable(kType, vType)
   local x = myhash["mhash" .. kType.name]
   local addItem = myhash["addItem_" .. kType.name]
   local countItem = myhash["countItems_" .. kType.name]
   local findItem = myhash["findItem_" .. kType.name]
   local createHash = myhash["createNewHashTable_" .. kType.name]
   local struct H {
      s : &x;
		  }
   
   terra H:add(key:kType, value:vType)
      var olditem = addItem(&(self.s),key, value)
      return olditem
   end
   terra H:get(key:kType)
      return findItem(&(self.s), key)
   end
   terra H:count()
      return countItem(&(self.s))
   end
   terra hash.create(a:H)
      var a:H
      a.s = createHash()
      return a
   end
   -- local hH = terralib.new(H, myhash["createNewHashTable_" .. kType.name]())
   return H
end


intHash = global(makePrimitiveTypedHashTable(int32, &int32))

terra test()
   var a = hash.create(intHash)
   var b= 10
   var j = a:add(10,&b)
   stdio.printf("%p\n", j)
   a:add(12,&b)

   stdio.printf("Number of items:%d\n", a:count())
   j  = a:get(10)
   stdio.printf("Key = 10, value=%d\n", @(j.value))
   var h1 = 13
   j = a:add(10,&h1)
   if j~=nil then
      do
	 stdio.printf("Old key=10, value=%d\n", @(j.value))
	 stdlib.free(j)
      end
   end
end
test()

-- TO EFFING MESSY, JUST WRITE YOUR OWN HASHTABLE in Terra
-- WHICH IS BEYOND MY SKILLS!
